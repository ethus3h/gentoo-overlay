Index: xbmc/MathUtils.h
===================================================================
--- xbmc/MathUtils.h	(revision 23196)
+++ xbmc/MathUtils.h	(working copy)
@@ -23,6 +23,7 @@
 #include <cassert>
 #include <climits>
 #include <cmath>
+#include <assert.h>
 
 namespace MathUtils
 {
@@ -30,8 +31,8 @@
   // to assert in these functions
   inline int round_int (double x)
   {
-    assert(x > static_cast<double>(INT_MIN / 2) - 1.0);
-    assert(x < static_cast <double>(INT_MAX / 2) + 1.0);
+    static_assert(x > static_cast<double>(INT_MIN / 2) - 1.0);
+    static_assert(x < static_cast <double>(INT_MAX / 2) + 1.0);
     const float round_to_nearest = 0.5f;
     int i;
 
@@ -62,8 +63,8 @@
 
   inline int ceil_int (double x)
   {
-    assert(x > static_cast<double>(INT_MIN / 2) - 1.0);
-    assert(x < static_cast <double>(INT_MAX / 2) + 1.0);
+    static_assert(x > static_cast<double>(INT_MIN / 2) - 1.0);
+    static_assert(x < static_cast <double>(INT_MAX / 2) + 1.0);
 
     #if !defined(__powerpc__) && !defined(__ppc__)
         const float round_towards_p_i = -0.5f;
@@ -97,8 +98,8 @@
 
   inline int truncate_int(double x)
   {
-    assert(x > static_cast<double>(INT_MIN / 2) - 1.0);
-    assert(x < static_cast <double>(INT_MAX / 2) + 1.0);
+    static_assert(x > static_cast<double>(INT_MIN / 2) - 1.0);
+    static_assert(x < static_cast <double>(INT_MAX / 2) + 1.0);
 
     #if !defined(__powerpc__) && !defined(__ppc__)
         const float round_towards_m_i = -0.5f;
